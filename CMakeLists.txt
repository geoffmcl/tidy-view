# 18:54 29/11/2015 - Add tidy dependency
# 16:34 29/11/2015 - Add header and syntax highlighter
# CMakeLists.txt, generated from [ed.pro]

cmake_minimum_required( VERSION 2.8.8 )

# CMakeScripts or use the ones that come by default with CMake.
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

project( tidy-view )

# Allow developers to select if Dynamic or static libraries are built.
set( LIB_TYPE STATIC )  # set default static
option( BUILD_SHARED_LIB    "Set ON to build Shared Libraries"      OFF )
option( BUILD_TEST_PROGRAMS "Set ON to build the utility programs"  OFF )

# NOTE: Both version and date MUST be DOT separated, in two lines.
file(READ version.txt versionFile)
if (NOT versionFile)
    message(FATAL_ERROR "Unable to determine libtidy version. version.txt file is missing.")
endif()
string(STRIP "${versionFile}" VERSION_TEXT)
string(REGEX REPLACE "(.*)[\r\n|\n](.*)" "\\1" TIDYVIEW_VERSION ${VERSION_TEXT})
string(REGEX REPLACE "(.*)[\r\n|\n](.*)" "\\2" TIDYVIEW_DATE ${VERSION_TEXT})
# establish version number
if (NOT TIDYVIEW_VERSION)
    message(FATAL_ERROR "*** FAILED to get a VERSION from version.txt!")
endif ()    
if (NOT TIDYVIEW_DATE)
    message(FATAL_ERROR "*** FAILED to get a DATE from version.txt!")
endif ()
add_definitions( -DTIDYVIEW_VERSION="${TIDYVIEW_VERSION}" )
add_definitions( -DTIDYVIEW_DATE="${TIDYVIEW_DATE}" )
message(STATUS "*** TIDYVIEW_VERSION=\"${TIDYVIEW_VERSION}\" TIDYVIEW_DATE=\"${TIDYVIEW_DATE}\"" )

# Uncomment to REDUCE the Windows configurations buildable
set(CMAKE_CONFIGURATION_TYPES "Release;Debug" CACHE STRING "" FORCE) # Disables MinSizeRel & MaxSpeedRel

if(CMAKE_COMPILER_IS_GNUCXX)
    set( WARNING_FLAGS -Wall )
endif(CMAKE_COMPILER_IS_GNUCXX)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
   set( WARNING_FLAGS "-Wall -Wno-overloaded-virtual" )
endif() 

if(WIN32 AND MSVC)
    # turn off various warnings
    set(WARNING_FLAGS "${WARNING_FLAGS} /wd4996")
    # foreach(warning 4244 4251 4267 4275 4290 4786 4305)
    #     set(WARNING_FLAGS "${WARNING_FLAGS} /wd${warning}")
    # endforeach(warning)
    set( MSVC_FLAGS "-DNOMINMAX -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS" )
    # if (${MSVC_VERSION} EQUAL 1600)
    #    set( MSVC_LD_FLAGS "/FORCE:MULTIPLE" )
    # endif ()
    # set( NOMINMAX 1 )
    list(APPEND extra_LIBS ws2_32.lib Winmm.lib)
    # to distinguish between debug and release lib
    set( CMAKE_DEBUG_POSTFIX "d" )
else ()
    # unix stuff
endif()

set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}" )

if( "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8" )
    set(IS_64_BIT 1)
    message(STATUS "*** Seems a 64-bit BUILD")
else ()
    message(STATUS "*** Seems a 32-bit BUILD")
endif ()

if (BUILD_SHARED_LIB)
    set(LIB_TYPE SHARED)
    message(STATUS "*** Building SHARED library...")
else ()
    message(STATUS "*** Building STATIC library...")
endif ()

# QT = core gui
message(STATUS "*** Finding Qt4 components COMPONENTS QtCore QtGui")
find_package ( Qt4 COMPONENTS QtCore QtGui REQUIRED )
include ( ${QT_USE_FILE} )
add_definitions( ${QT_DEFINITIONS} )
# debug messages
message(STATUS "*** include ${QT_USE_FILE}")
message(STATUS "*** defs  ${QT_DEFINITIONS}")
message(STATUS "*** libs ${QT_LIBRARIES}")

#  TIDY_FOUND          - True if tidy found.
#  TIDY_INCLUDE_DIRS   - where to find tidy.h, etc.
#  TIDY_LIBRARIES      - List of libraries when using tidy.
find_package( Tidy )
if (TIDY_FOUND)
    message(STATUS "*** Tidy found. lib ${TIDY_LIBRARIES} inc ${TIDY_INCLUDE_DIRS}")
    list(APPEND add_LIBS ${TIDY_LIBRARIES})
    include_directories( ${TIDY_INCLUDE_DIRS} )
else ()
    message(FATAL_ERROR "*** Tidy NOT found! Can NOT build Tidy GUI2")
endif ()

set(name tidy-view)
set(dir src)

set( ${name}_SRCS
    ${dir}/main.cpp
    ${dir}/mainwindow.cpp
    ${dir}/highlighter.cpp
    ${dir}/codeeditor.cpp
    )
set( ${name}_HDRS
    ${dir}/mainwindow.h
    ${dir}/highlighter.h
    ${dir}/codeeditor.h
    )

# Added for DEBUG only
#get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
#message(STATUS "*** inc_dirs = ${inc_dirs}")

QT4_WRAP_CPP( ${name}_HDRS_MOC ${${name}_HDRS} )

add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS_MOC} ${${name}_HDRS} )
target_link_libraries( ${name} ${QT_LIBRARIES} ${add_LIBS} ${extra_LIBS} )
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
# deal with install 
install(TARGETS ${name} DESTINATION bin )

# eof - original generated by Qt2cmake.pl, on 2015/11/29 16:10:03
